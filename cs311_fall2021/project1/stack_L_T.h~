/***********************************
Template created by Kazumi Slott
CS311
Stack implemented with a LL

Your name here: Daniel Herrera
Your programmer number here: 11
Any problems you had? Explain here:
******************************************************************************************************************/
#ifndef STACK_L_T_H
#define STACK_L_T_H

#include <iostream> 
using namespace std;

const int MAX = 3;

template < class T > //forward declaration needed so we can make stack class a friend of node
class Stack;

template < class T > //forward declaration needed so we can make operator<< a friend of node and Stack
ostream& operator<<(ostream& o, const Stack<T>& s);


template < class T >
class Node
{
  friend class Stack<T>; //Stack class accesses the private members of Node
  friend ostream& operator<< <T>(ostream& o, const Stack<T>& s); //operator<< accesses the private members of Node

 private:
  T  elem;
  Node*  next;
 public:
  Node(){next=NULL;} //default constructor
  Node(const T& e){elem = e; next = NULL;}
};

template <class T>
class Stack
{
  friend ostream& operator<< <T>(ostream& o, const Stack& s); //operator<< accesses the private members of Stack

 private:
 Node<T>*  top;
 int  size;

 //helper functions - private because they won't be called from client
  void destroy();
  void copy(const Stack& source);

 public:
  Stack() {top = NULL; size = 0;} //Implement a small function inside the class definition 
  Stack(const Stack& other);
  ~Stack();
  Stack& operator=(const Stack& rhs); //rhs = right hand side of the operator   LHS_obj = RHS_obj
  bool empty() const{return (top==NULL && size==0);} //implement a small function inside the class definition
  bool full() const {return (size == MAX);}
  int getSize() const{return size;} //implement here
  void push (const T& val);
  void pop();
  T& getTop(); //Return type is T& so client can change the top value
  const T& getTop() const; //A const object needs to call a const member function

  //Make an exception class here - You need to figure out where to throw an exception - I am throwing in 3 functions.
  class Overflow;
  class Underflow{}; 
   
  class Overflow 
  {
  private:
    T val;
  public: 
    //constructor
    Overflow(T v){val = v;}
    //getter funct to access the private data member
    T getElem(){return val;} 
  };
};


template <class T>
void Stack<T>::push(const T& val)
{
  if(full()) 
    {
       throw Overflow(val);
    }
  else
    {
       Node<T>* new_node = new Node<T>; //create new_node
       new_node->elem = val;             //set new value to elem of the new_node
       new_node->next = top;             //set new_node->next to point to address of top
       top = new_node;                   //set address of new_node to be the new top
       size++;                           //increment size of stack by 1
      //FYI, I have 4 lines of code here. You may have less or more.
    }
}



template <class T>
void Stack<T>::pop()
{
  if(empty())
    {
      throw Underflow();
    }
  else 
    {
      Node<T>* temp = new Node<T>;
      temp = top; //copy address of top to temp
      top = top->next; //set address of top->next as the new top
      delete temp;
      size--;
    }
}



template <class T>
T& Stack<T>::getTop()
{
  if(!empty()) return top->elem;  //return the top element. Since the return type is T&, the client can change the top.
  else
    {
      throw Underflow();
    }
}


/*
//***************************************************
//********  You will make this after the next lecture
//***************************************************
template <class T>
const T& Stack<T>::getTop() const
{

  return ?????? // same as the getTop() above. We need to provide this so a const object can call getTop(). Recall a const object can only call const member functions.
}
*/


/*
//This function will show all the elements in the stack in the following format.
//cout << stackObj; <== This cout is calling the following function. same as operator<<(cout, stackObj); 
//Recall operator<< cannot be a member function because the LHS of the operator (<<) is not a stack object (it's cout, an ostream object). 
//     --- Top ---
//     2
//     1
//     --- Bottom ---
template <class T>
ostream& operator<<(ostream& o, const Stack<T>& s)
{
  //print from top to bottom.

  cout << "--- Top ---" << endl;


  cout << "--- Bottom ---" << endl;
 
}
*/


template <class T>
Stack<T>::~Stack()
{
  destroy(); 
}


//helper function - called from destructor and operator=
template<class T>
void Stack<T>::destroy() //This function will be called by destructor and operator=
{
  //destroy all nodes
  Node<T>* current = top;  //make copy of top address under alias current
  while ( current != NULL ) //as long as we are not at the end of list, keep going 
    {
      current->next = current; 
      delete current; //work ip
    }
}


/*
//***************************************************
//********  You will make this after the next lecture
//***************************************************
template <class T>
Stack<T>& Stack<T>::operator=(const Stack& rhs) //rhs = right hand side of the operator
{
  //good reading from cal tech
  //http://courses.cms.caltech.edu/cs11/material/cpp/donnie/cpp-ops.html

  //deep copy
  if(???????) //Check the addresses of the left and right objects. If they are the same, you are trying to assign the same object   s = s;
              //You copy only if the left object is not the same as the right object.
    {
      //destroy any memory space "this" is using. "this" may have elements already. call destroy
      //call copy
    }
  return ???????; //return the "this" object 
}
*/


/*
//***************************************************
//********  You will make this after the next lecture
//***************************************************
//helper fuction. called from operator= and copy constructor
template <class T>
void Stack<T>::copy(const Stack& source) //source is the stack object copied from. 
{
  //"this" object ends up having the same values from source
  //Make sure this function won't crush when the source stack is empty 
}
*/

/*
//***************************************************
//********  You will make this after the next lecture
//***************************************************
//copy constructor
template <class T>
Stack<T>::Stack(const Stack& other)
{
  //This is a copy constructor. This new object will get the same values as the other object. 
  //You still need to initialize the data members.
  ???????
  ???????

  //Then you can call the copy function
}
*/


#endif // end the definition here
