template <class T>
void BST<T>::BFTprint()  //Breadth First Traversal Print 
{
  //Use the library's queue. https://www.google.com/url?client=internal-element-cse&cx=000747561938282180878:lrfgxurgbda&q=https://www.cplusplus.com/reference/queue/queue/&sa=U&ved=2ahUKEwimjMj9v-nzAhXDCjQIHXeYDm8QFnoECAUQAQ&usg=AOvVaw3vUfDpaPV6Q--9naQsl681

  //Make sure to include <queue> at the top
  //create a queue obj of pointers to Nodes

  //algorithm is discussed in lecture

  //NOTICE
  //front() gives you the front element but it doesn't remove it from the queue.
  //pop() removes the front element
}

template <class T>
void BST<T>::DFTprint()  //Depth First Traversal Print                                                           
{
  //sssse library's stack class. https://www.google.com/url?client=internal-element-cse&cx=000747561938282180878:lrfgxurgbda&q=https://www.cplusplus.com/reference/stack/stack/&sa=U&ved=2ahUKEwig4bzlwenzAhX1JTQIHWSNDsgQFnoECAYQAQ&usg=AOvVaw2WzZj1X_p59F2QRf2trcV3

  //Make sure to include <stack> at the top                                                                        
  //create a stack of pointers to Nodes

  //top() will give you the top element but it will not remove it from the stack.
  //pop() removes the top element.                                                                   
}

//This function returns true if e was removed or false if not because it doesn't exist.
template <class T>
bool BST<T>::remove(const T& e) //public function
{
  ???? del = root; //del will point to the node to be deleted
  ???? parent = NULL; //parent will point to the parent node of the node to be deletede 

  //look for e in the tree 
  while(del!=NULL && del->el ????) //If root is NULL, del is NULL to start with. While won't be entered and return false down below.
    {
      //parent follows del. In other words, del is ahead of parent. --> you did something similar in insertI()
      //del will eventually point to the node to be deleted.
    }

  //e doesn't exist or tree is empty.
  if(?????)
    return false;

  //check to see if root should be removed
  if(???????)
    remove(root); //root will change. call the other remove function down below
  //We are deleting a node other than the root node. Figure out if del's node is left or right child of parent's node
  else if(parent?????????????) //parent's left child to be removed
    remove(parent->left);
  else //parent's right child to be removed
    remove(???????);

  //deleted the node with e
  return ?????;
}

template <class T>
//p coming out of the parent node and points to the node to be deleted OR p points to root node if root node is the one to be deleted.
//p will point to the grandchild (child node of the node to be deleted) if the node to be deleted has only one child or NULL if p is root or the node to be deleted has no children. p will change. That is why we need to use &.      

void BST<T>::remove(Node<T>*& p) //private function
{
  ?????? temp = p; //temp points to the node to be deleted initially
  ?????? t_parent; //t_parent will point to the parent node of temp's node

  //the node to be deleted has no right child (Check Diagram1 in the homework document "HMWK BST - BFT, DFT and remove" under "Assignments")
  //If the node to be deleted has no children, the following if will be executed.(Check Diagram2) 
  if(??????)  
    ??? p->left; //p(The left or right coming out of parent of del's node) now points to the root of the left subtree under del's node. DONE.  If the node to be deleted has no children, p is set to NULL because p->left is NULL.
  //the node to be deleted has no left child (Check Diagram 3)
  else if(??????) 
    ????????;//p(The left or right coming out of parent of del's node) now points to the root of the right subtree under del's node. DONE.
  //If the node to be deleted has 2 children
  else
    {
      //we are going to replace e by the largest value in the left subtree
      temp = ??????; //temp points to the root of the left subtree under the node to be deleted to start with
      t_parent = ??; //t_parent points to the node to be deleted to start with

      //go to the largest value in the left subtree under the node to be deleted by going all the way down to right
      while(????????)
	{
	  t_parent = ?????; //temp is ahead of t_parent
	  temp = ????; //temp will eventually point to the largest value
	}
      //copy the largest value into the node to be deleted 
      ????????????;

      if(????????) //the largest value is the direct left child of the node whose value was replaced by the largest (Diagram 4)
	????????; //connect the left of the node whose value was replaced by the largest value to the left child of the node that has the largest value
      else //the largest value is NOT the direct left child of the node whose value was replaced by the largest (Diagram 5)
	????????; //If the node with the largest value doesn't have any children, t_parent->right is set to NULL.
    }
  //finally delete temp;
  ??????????;
}

